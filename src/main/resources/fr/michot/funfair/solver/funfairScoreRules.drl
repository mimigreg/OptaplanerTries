package fr.michot.funfair.solver;
dialect  "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import fr.michot.funfair.domain.Attraction;
import fr.michot.funfair.domain.Period;
import fr.michot.funfair.domain.VisitorGroup;
import fr.michot.funfair.domain.VisitorWish;
import fr.michot.funfair.domain.FunSession;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "$requiredCapacityTotal"
    when
        $attraction : Attraction($sessionCapacity : sessionCapacity)
        $period : Period()
        $requiredCapacityTotal : Number(intValue > $sessionCapacity) from accumulate(
            FunSession(
                attraction == $attraction,
                period == $period,
                $requiredCapacity : visitorGroup.visitorList.size
                ),
            sum($requiredCapacity)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $sessionCapacity - $requiredCapacityTotal.intValue());
end

rule "$personPlaningConflict"
    when
        $period : Period($periodDuration : durationInMinutes)
        $group : VisitorGroup($groupId : id)
        $requiredGroupDurationTotal : Number(intValue > $periodDuration) from accumulate(
            FunSession(
                visitorGroup == $group,
                period == $period,
                $requiredDuration : attraction.sessionDuration
                ),
            sum($requiredDuration)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, $periodDuration - $requiredGroupDurationTotal.intValue());
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "$optimiseEmptyPlaces"
    when
        $attraction : Attraction($sessionCapacity:sessionCapacity)
        $period : Period()
        $occupiedSpacesTotal : Number(intValue > 0 ) from accumulate(
            FunSession(
               period == $period,
               attraction == $attraction,
               $occupiedPlaces : visitorGroup.visitorList.size
            ),
            sum($occupiedPlaces)
        )
    then
        scoreHolder.addSoftConstraintMatch(kcontext, -($sessionCapacity - $occupiedSpacesTotal.intValue()));
end
